
#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Packages System Setup

#+begin_src emacs-lisp

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; Make ESQ quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)


(require 'use-package)
(setq use-package-always-ensure t)

#+end_src

* Basic UI configuration

#+begin_src emacs-lisp
  
  (setq inhibit-startup-message t)
  
  (scroll-bar-mode -1) ; Disable visible scrollbar
  (tool-bar-mode -1)   ; Disable the toolbar
  (tooltip-mode -1)    ; Disable tooltips
  (set-fringe-mode 10) ; Give some breathing room
  
  (menu-bar-mode -1)   ; Disable the menu bar
  
  ;; Set up the visible bell
  (setq visible-bell t)
  
  (column-number-mode)
  (global-display-line-numbers-mode t)
  
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  
#+end_src

** Font configuration

#+begin_src emacs-lisp

(set-face-attribute 'default nil :font "Fira Code Retina" :height 110)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 110)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Fira Code Retina" :height 110)

#+end_src


* Keybinding Configuration

#+begin_src emacs-lisp

(use-package general
   :config
   (general-create-definer rune/leader-keys
   :keymaps '(normal insert visual emacs)
   :prefix "SPC"
   :global-prefix "C-SPC"))

(rune/leader-keys
 "t" '(:ignore t :which-key "toggles")
 "tt" '(counsel-load-theme :which-key "choose theme"))

 (general-define-key
 "C-M-j" 'counsel-switch-buffer
 "C-M-," 'comment-region
 "C-M-." 'uncomment-region)

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-respect-visual-line-mode t)
  (setq evil-undo-system 'undo-tree)
  (evil-mode 1))

(defun dw/evil-hook ()
  (dolist (mode '(custom-mode
                  eshell-mode
                  git-rebase-mode
                  erc-mode
                  circe-server-mode
                  circe-chat-mode
                  circe-query-mode
                  sauron-mode
                  term-mode))
    (add-to-list 'evil-emacs-state-modes mode)))

#+end_src

* UI Configuration

** Command Log Mode

#+begin_src emacs-lisp

(use-package command-log-mode)

#+end_src

** Ivy and Counsel

#+begin_src emacs-lisp


(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-f" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1))
(setq doom-modeline-height 45)
(setq doom-modeline-major-mode-color-icon t)

(use-package doom-themes
	:config
	(load-theme 'doom-palenight t))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))


(use-package counsel
  :demand t
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         ;; ("C-M-j" . counsel-switch-buffer)
         ("C-M-l" . counsel-imenu)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))


#+end_src

** Helpful Help Commands

#+begin_src emacs-lisp
  
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))
  
#+end_src

** Text scaling

#+begin_src emacs-lisp

(use-package hydra)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(rune/leader-keys
 "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** Transparency

#+begin_src emacs-lisp
  
  (set-frame-parameter (selected-frame) 'alpha '(90 90))
  
  (add-to-list 'default-frame-alist '(alpha 90 90))
  
  
  (defun toggle-transparency ()
     (interactive)
     (let ((alpha (frame-parameter nil 'alpha)))
       (set-frame-parameter
        nil 'alpha
        (if (eql (cond ((numberp alpha) alpha)
                       ((numberp (cdr alpha)) (cdr alpha))
                       ;; Also handle undocumented (<active> <inactive>) form.
                       ((numberp (cadr alpha)) (cadr alpha)))
                 100)
            '(90 . 90) '(100 . 100)))))
  (global-set-key (kbd "C-c t") 'toggle-transparency)
  
  
#+end_src

* Org Mode

** Basic Config

#+begin_src emacs-lisp

;; Turn on indentation and auto-fill mode for Org files
(defun dw/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

  (use-package org
  :hook (org-mode . dw/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"
	org-hide-emphasis-markers t)
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-agenda-files
	'("C:/Users/user/Desktop/emacs/projects/org/test")))


        (setq org-refile-targets
        '(("Archive.org" :maxlevel . 1)
	("Tasks.org" :maxlevel . 1)))

;; Save Org buffers refiling:
(advice-add 'org-refile :after 'org-save-all-org-buffers)

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

 ;;(set-face-attribute 'org-document-title nil :font "Arial" :weight 'bold :height 1.3)

  (defun dw/org-mode-visual-fill ()
  (setq visual-fill-column-width 110
        visual-fill-column-center-text t)
        (visual-fill-column-mode 1))

(use-package visual-fill-column
        :hook (org-mode . dw/org-mode-visual-fill))


#+end_src

** Config Babel languages

#+begin_src emacs-lisp

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))

(push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Auto-tangle configuration files

#+begin_src emacs-lisp

;; Automatically tangle our Emacs.org config file when we save it

(defun efs/org-babel-tangle-config()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/emacs.org"))

    ;; Dinamyc scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

* Block Templates

#+begin_src emacs-lisp

;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("go" . "src go"))
(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))

#+end_src


#+begin_src emacs-lisp

(setq inferior-lisp-program "sbcl")

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package undo-tree
  :init
  (global-undo-tree-mode 1))



#+end_src


* Development

** Comments

#+begin_src emacs-lisp
  
  (use-package evil-nerd-commenter
    :bind ("M-A" . evilnc-comment-or-uncomment-lines))
  
#+end_src

** Languages

*** Languages Servers Support

#+begin_src emacs-lisp
  
  (use-package company
  :ensure t
  :config
  (setq company-idle-delay 0.3)
  (global-company-mode 1)
  (global-set-key (kbd "C-<tab>") 'company-complete))
  
  (use-package company-box
    :hook (company-mode . company-box-mode))
  
   (use-package flycheck)
  
   (use-package lsp-mode
    :config
    (setq lsp-prefer-flymake nil)
    :hook (php-mode . lsp)
    :commands lsp)
  
   (use-package lsp-ui
    :requires lsp-mode flycheck
    :config
    (setq lsp-ui-doc-enable t
    lsp-ui-doc-use-childframe t
    lsp-ui-doc-position 'top
    lsp-ui-doc-include-signature t
    lsp-ui-sideline-enable nil
    lsp-ui-flycheck-enable t
    lsp-ui-flycheck-list-position 'right
    lsp-ui-flycheck-live-reporting t
    lsp-ui-peek-enable t
    lsp-ui-peek-list-width 60
    lsp-ui-peek-peek-height 25
    lsp-ui-sideline-enable nil)
  
   (add-hook 'lsp-mode-hook 'lsp-ui-mode))
  
   (use-package lsp-treemacs
     :after lsp)
    
#+end_src

*** Typescript

#+begin_src emacs-lisp
  
  (use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
  
#+end_src

**** PHP

#+begin_src emacs-lisp
  
  (use-package php-mode
   :ensure t
   :mode
   ("\\.php\\'" . php-mode))
  
  (add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
  
  (use-package phpunit
   :ensure t)
  
  (provide 'lang-php)
  
#+end_src



** Projectile

#+begin_src emacs-lisp
  
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind ("C-M-p" . projectile-find-file)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))
  
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
  
#+end_src

** Magit

#+begin_src emacs-lisp
          
  (use-package magit
    :bind ("C-M-;" . magit-status)
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  
  ;(use-package evil-magit
    ;:after magit)
  
  (use-package forge)
  
  
  (rune/leader-keys
    "g"   '(:ignore t :which-key "git")
    "gs"  'magit-status
    "gd"  'magit-diff-unstaged
    "gc"  'magit-branch-or-checkout
    "gl"   '(:ignore t :which-key "log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb"  'magit-branch
    "gP"  'magit-push-current
    "gp"  'magit-pull-branch
    "gf"  'magit-fetch
    "gF"  'magit-fetch-all
    "gr"  'magit-rebase)
  
  
#+end_src


